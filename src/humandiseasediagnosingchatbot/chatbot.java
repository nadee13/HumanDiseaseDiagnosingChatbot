/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package humandiseasediagnosingchatbot;

import static com.sun.java.accessibility.util.AWTEventMonitor.addActionListener;
import java.awt.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import org.jpl7.Query;
import org.jpl7.Term;

/**
 *
 * @author Nadeesha
 */
public class chatbot extends javax.swing.JFrame implements ActionListener {
    String name;
    String flag = ""; 
    ArrayList<String> diseases = new ArrayList<String>();
    ArrayList<String> tempdiseases = new ArrayList<String>();
    Timer timer = new Timer();
    /**
     * Creates new form chatbot
     */
    public chatbot() {
        initComponents();
        setLocationRelativeTo(null);
        timer.schedule(new TimerTask() {
          @Override
          public void run() {
            // Your database code here
            greetings();
          }
        }, 1*1000);
    }
    
    private void greetings(){
         jTextArea1.append("Susan: " + "Hello! I am Susan. What is your name? \n\n");
    }

    private void sayhello(){
        name = jTextField1.getText();
        jTextArea1.append(name + ": " + name + "\n\n");
        jTextField1.setText("");
        
        timer.schedule(new TimerTask() {
          @Override
          public void run() {
            // Your database code here
            jTextArea1.append("Susan: " + "Hello " + name + "! Tell me your symptoms\n");
            jTextArea1.append("Susan: " + "Do you have fever? (yes/no)\n\n");
          }
        }, 1*1000);
        
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Medical Diagnosing Chatbot");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextField1.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N

        jButton1.setText("Send");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String answer = "";
        String t = "";
        Query q;
        java.util.Map<String, Term>[] solution;
                
        if (!(jTextField1.getText().equals("yes")||jTextField1.getText().equals("no"))) {
            // do nothing
            sayhello();
        } 
        else{
            switch(flag){
                case "": 
                    System.out.println("Check for fever");
                    answer = jTextField1.getText();
                    jTextField1.setText("");
                    jTextArea1.append(name + ": " + answer + "\n\n");
                        t = "symptom(fever, X).";
                        q = new Query(t);

                        solution = q.allSolutions();

                        while (q.hasMoreSolutions()) {
                            Map<String, Term> s;
                            s = q.nextSolution();
                            String d = s.get("X").toString();
                            if(answer.equals("yes") && !diseases.contains(s)){
                                diseases.add(d);
                            }
                            System.out.println("X = " + s.get("X"));
                        }
                        System.out.println("Possible diseases" + diseases.toString());
                    flag = "1";
                    timer.schedule(new TimerTask() {
                        @Override
                        public void run() {
                          // Your database code here
                                  jTextArea1.append("Susan: " + "Do you have headache? (yes/no)\n\n");
                        }
                      }, 1*1000);
                    break;

                case "1": 
                    System.out.println("Check for headache");
                    flag = "2";
                    answer = jTextField1.getText();
                    jTextField1.setText("");
                    jTextArea1.append(name + ": " + answer + "\n\n");
                        t = "symptom(headache, X).";
                        q = new Query(t);

                        solution = q.allSolutions();

                        while (q.hasMoreSolutions()) {
                            Map<String, Term> s2;
                            s2 = q.nextSolution();
                            String d = s2.get("X").toString();
                            if (answer.equals("no") && diseases.contains(d)){
                                diseases.remove(d);
                            }
                            System.out.println("X = " + s2.get("X"));
                            
                        }
                        System.out.println("Possible diseases" + diseases.toString());
                    flag = "2";
                    timer.schedule(new TimerTask() {
                        @Override
                        public void run() {
                          // Your database code here
                                  jTextArea1.append("Susan: " + "Do you have rash? (yes/no)\n\n");
                        }
                      }, 1*1000);
                    break;
                    
                case "2": 
                    System.out.println("Check for rash");
                    flag = "2";
                    answer = jTextField1.getText();
                    jTextField1.setText("");
                    jTextArea1.append(name + ": " + answer + "\n\n");
                        t = "symptom(rash, X).";
                        q = new Query(t);

                        solution = q.allSolutions();

                        while (q.hasMoreSolutions()) {
                            Map<String, Term> s2;
                            s2 = q.nextSolution();
                            String d = s2.get("X").toString();
                            if (answer.equals("no") && diseases.contains(d)){
                                diseases.remove(d);
                            }
                            System.out.println("X = " + s2.get("X"));
                            
                        }
                        System.out.println("Possible diseases" + diseases.toString());
                    flag = "3";
                    timer.schedule(new TimerTask() {
                        @Override
                        public void run() {
                          // Your database code here
                                  jTextArea1.append("Susan: " + "Do you have sneezing? (yes/no)\n\n");
                        }
                      }, 1*1000);
                    break;
                    
                    
                case "3": 
                    System.out.println("Check for sneezing");
                    flag = "2";
                    answer = jTextField1.getText();
                    jTextField1.setText("");
                    jTextArea1.append(name + ": " + answer + "\n\n");
                        t = "symptom(sneezing, X).";
                        q = new Query(t);

                        solution = q.allSolutions();

                        while (q.hasMoreSolutions()) {
                            Map<String, Term> s2;
                            s2 = q.nextSolution();
                            String d = s2.get("X").toString();
                            if (answer.equals("no") && diseases.contains(d)){
                                diseases.remove(d);
                            }
                            System.out.println("X = " + s2.get("X"));
                            
                        }
                        System.out.println("Possible diseases" + diseases.toString());
                    flag = "4";
                    timer.schedule(new TimerTask() {
                        @Override
                        public void run() {
                          // Your database code here
                                  jTextArea1.append("Susan: " + "Do you have chills? (yes/no)\n\n");
                        }
                      }, 1*1000);
                    break;
                    
                    
                case "4": 
                    System.out.println("Check for chills");
                    flag = "2";
                    answer = jTextField1.getText();
                    jTextField1.setText("");
                    jTextArea1.append(name + ": " + answer + "\n\n");
                        t = "symptom(headache, X).";
                        q = new Query(t);

                        solution = q.allSolutions();

                        while (q.hasMoreSolutions()) {
                            Map<String, Term> s2;
                            s2 = q.nextSolution();
                            String d = s2.get("X").toString();
                            if (answer.equals("no") && diseases.contains(d)){
                                diseases.remove(d);
                            }
                            System.out.println("X = " + s2.get("X"));
                            
                        }
                        System.out.println("Possible diseases" + diseases.toString());
                    flag = "5";
                    if(!diseases.isEmpty()){
                        timer.schedule(new TimerTask() {
                        @Override
                        public void run() {
                          // Your database code here
                                  jTextArea1.append("Susan: " + name + ", you have " + diseases.toString().replace("[", "").replace("_", " ").replace("]", "").replace(",", " or").trim() + ". Please consult a doctor.");
                        }
                      }, 1*1000);
                        
                    }else{
                        timer.schedule(new TimerTask() {
                        @Override
                        public void run() {
                          // Your database code here
                          jTextArea1.append("Susan: " + "Sorry " + name + "! I cannot diagnose your illness. Please consult a doctor.");
                        }
                      }, 1*1000);
                    }
                    
                    break;
            }
        }

        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(chatbot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(chatbot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(chatbot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(chatbot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new chatbot().setVisible(true);       
                
                String t1 = "consult('C:/Users/Nadeesha/Documents/NetBeansProjects/HumanDiseaseDiagnosingChatbot/src/humandiseasediagnosingchatbot/symptoms_knowledge_base.pl')";
                Query q1 = new Query(t1);

                System.out.println(q1 + " " + (q1.hasSolution()?"success":"fail"));

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent ae) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
